#include <iostream>
#include <vector>
#include <math.h>
using namespace std;

class Pokemon{
    public:

    string name;
    int health;
    int maxHealth; // Its for my combat system
    int attackPower;

    float exp = 0;
    int level = 1;
    float solidLevelUpThreshold = 500; // I'll use this to have a constant value for calculating levelUpThreshold
    float levelUpThreshold = 500; // I'll be using this to calculate the exp need for leveling up
    float expGainMultiplier = 1;
    
    static string type;
   
    static vector<string> strengths;

    // Counters this Pokemon
    static vector<string> weaknesses;

    // Bunda static aşşa tarafa int yazıp postalıyon
    // Static sadece hangi tarafta static olduğunu belirtmek içün
    static int PokemonCount;
    Pokemon(){
        name = "Unknown";
        maxHealth, health = 1;
        attackPower = 1;
    }

    Pokemon(string n, int h, int aP){
        name = n;
        maxHealth, health = h;
        attackPower = aP;
    }


    

    void gainExp(float amount){
        exp += amount * expGainMultiplier;

    }

    void levelUp(int quantity){
        level += quantity;
        exp -= levelUpThreshold;
        levelUpThreshold =  solidLevelUpThreshold * pow(level, 2/3);
        
    }

    void pokedex(){
        for(int i = 1; i <= 20; i++){cout << "-"; if(i == 10) cout << " Pokedex ";}; cout << endl;
        cout << "Name: " << name << endl;
        cout << "Health: " << health << "/" << maxHealth << endl;
        cout << "Attack Power: " << attackPower << endl;
        cout << "Level: " << level << endl;
        cout << "Experience: " << exp << "/" << levelUpThreshold << endl;
        for(int i = 1; i <= 29; i++) cout << "-"; cout << endl;
    }

    // Can be merged Birleştirilebilir mana
    virtual bool checkStrenghts(string searchedType){
        for(int i = 0; i < size(strengths); i++){
            if(searchedType == strengths[i]) return true;
        }
        return false;
    }

    virtual bool checkWeakness(string searchedType){
        for(int i = 0; i < size(weaknesses); i++){
            if(searchedType == weaknesses[i]) return true;
        }
        return false;
    }
};

int Pokemon::PokemonCount = 0;

class Fire : public Pokemon{
    public:
    string type = "Fire";
    virtual void fire(){
        cout << name << " breathed fire!" << endl;
    }
};

class Fighting : public Pokemon{
    public:
    virtual void fight(){
        cout << name << " showed its fighting skills!" << endl;
    }
};

class Water : public Pokemon{
    public:
    virtual void spray(){
        cout << name << " sprayed water!" << endl;
    }
};

class Ice : public Pokemon{
    public:
    virtual void freeze(){
        cout << name << " rained a few snowflakes!" << endl;
    }
};

class Electric : public Pokemon{
    public:
    virtual void electrocute(){
        cout << name << " casually lighted a light bulb!" << endl;
    }
};

class Charizard : public Fire{
    public:
    Charizard(){
        name = "Charizard"; 
        maxHealth = health = 75;
        attackPower = 17;
    }
};

class Machamp : public Fighting{
    public:
    Machamp(){
        name = "Machamp";
        maxHealth = health = 96;
        attackPower = 11;
    }
};

class Eiscue : public Ice{
    public:
    Eiscue(){
        name = "Eiscue";
        maxHealth = health = 64;
        attackPower = 16;
        expGainMultiplier = 1.5;
    }
};

class Jolteon : public Electric{
    public:
    Jolteon(){
        name = "Jolteon";
        maxHealth = health = 80;
        attackPower = 15;
        
    }
};

class Team{
    public:
    string teamName;
    vector<Pokemon> teamMembers;
    unsigned int teamMemberCount = 0;
    
    Team(string tN){
        teamName = tN;
    }

    void addMember(const Pokemon &addedMember){
        teamMembers.push_back(addedMember);
        teamMemberCount ++;
    }

    void displayMembers(){
        for(int i = 1; i <= 20; i++){cout << "-"; if(i == 10) cout << "Team " << teamName;}; cout << endl;

            if(teamMemberCount != 0){
                cout << "Members of "<< teamName << ":" << endl;
                for(int i = 0; i < teamMemberCount; i++){
                            cout << i + 1 << ". " << teamMembers[i].name << "   " << teamMembers[i].level << "   " << teamMembers[i].exp << "/" << teamMembers[i].levelUpThreshold << endl;
                        }
            }else cout << teamName << " doesn't have members yet" << endl;
        


        for(int i = 1; i <= 34; i++)cout << "-"; cout << endl;

    }


};

class Trainer{
    public:
    string trainerName;
    float trainerExpMultiplier;

    Trainer(string tN, float tEM){
        trainerName = tN;
        trainerExpMultiplier = tEM;
    }

};





int main(){
    Charizard charizard;
    Machamp machamp;
    Eiscue eiscue;
    Jolteon jolteon;

    eiscue.pokedex();

    Team OGLER = {"OGLER"};

    OGLER.addMember(charizard);
    OGLER.addMember(machamp);
    OGLER.addMember(eiscue);
    OGLER.addMember(jolteon);

    OGLER.displayMembers();
}